bookref: 3.2
checklist:
  - item: Identify the differences in the purposes of agile and plan-driven measurement
  - item: Recognize your agile measurement goals
  - item: Select the most important agile metrics for your purposes
  - item: Learn practical guidelines for measuring agile and lean software  development 
description: >
  Agile methods are inherently empirical – they use metrics (see 
  <a href="/files/part5/Agile_metrics_classification.pdf">Agile metrics classification</a>) and practices rigorously to achieve a good match between the delivered software and customers' expectations. In Agile mindset, estimating is applied as a way to predict how much the team can get done to guide sprint planning—not as a target that should be achieved as closely as possible. For example, a team's velocity is used in XP to assign a sustainable amount of work to the team and plan the iteration contents accordingly, whereas traditional planning would set the team a productivity goal as given and track team performance against that goal. <p> <p> Agile methods emphasize measuring progress in terms of working software over measuring intermediate work products (documents) and strive for making the measurement simple and immediate. Overall, Agile methods create two types of conflicts to Traditional measurement approaches (see Table - The contrast between agile and traditional measurement programs). First, the traditional approach of tracking progress against a pre-made plan and measurable goals conflicts with the Agile value of embracing the change. Second, the standard quality measurement approaches propose a rather comprehensive set of metrics, which does not align well with the Agile principle of simplicity. <p><p> The following table shows the contrast between agile and traditional measurement programs:<p><img src="The_contrast_between_agile_and_traditional_measurement_programs.png" alt="The contrast between agile and traditional measurement programs" style="width=100%;height:100%;"><p>
parts:
    - order: 1
      bookref: 3.2.2
      title: The Purposes of Measuring Agile and Lean Software Development
      guidelines:
        - guideline: Describe your goals for using metrics in agile
          description: >
            Metrics can be used for different purposes in software development and these purposes differ between agile and more traditional measurement programs. 
        - guideline: Recognize the key metrics of your needs
          description: >
            The number of the available metrics is extensive. Therefore, you should focus on the most important metrics first, and continue the metrics development after the most important ones are implemented.  
    - order: 2
      bookref: 3.2.4
      title: Instructions on Applying the Measurements in Agile and Lean
      guidelines:
        - guideline: Keep focusing on product and process
          description: >
            In agile and lean context, the metrics are focused on the process and product, but not much on people or individuals. This is due to the agile development principles requiring a capable self-organizing team, the members of which can improve themselves without metrics.
        - guideline: Do not measure documents
          description: >
            In agile, documentation is just a tool and part of the feature development instead of an individual deliverable as such.
        - guideline: Use multiple viewpoints to measure progress 
          description: >
            The progress metrics can be combined to a set of metrics to avoid the problems of one-dimensional metrics. Combining burn-down, check-ins per day, number of passing automated tests, and number of new and open defects could give a rather rich understanding of the progress of agile development project from multiple view-points.  
        - guideline: Do not measure partial completeness 
          description: >
            It is a common desire to use the story percent complete metric to indicate the progress in terms of incomplete stories. However, this practice should be applied with caution, since it is somewhat in contradiction with agile principles of tracking progress in terms of running tested features, by definition of done. Measuring the completion percentages of stories under development has a risk of “90% of time 90% completed” syndrome. 
        - guideline: Do not measure everything 
          description: >
            A common way of communicating progress in agile projects is having regular sprint demonstrations which, even though not actual metric, gives a concrete visibility to the actual progress in terms of working code and completed features. 
        - guideline: Passed tests indicate the progress 
          description: >
            It is good to include the testing tasks in the progress metrics to help getting the tests written and testing done early as part of the development work. 
